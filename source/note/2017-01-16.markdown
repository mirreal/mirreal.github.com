---
layout: page
title: "2017-01-16"
date: 2017-01-16 19:05
comments: true
sharing: true
footer: true
---

ESLint


## Overview

为了保证代码的可读性、可维护性，保持代码风格统一，并避免一些低级错误，和潜在的可能导致 Bug 的因素

所以有了这份代码规范征集

代码规范主要参考 [standardjs](http://standardjs.com/)，[Airbnb JavaScript Style Guide](https://github.com/airbnb/javascript) 以及 [ESLint shareable config for the Google JavaScript style guide](https://github.com/google/eslint-config-google)

制定一个基础的规范，这里列举一些最主要的规范：

* 使用 4 个空格缩进
* 在语句结束使用分号
* 在字符串使用单引号
* 不允许在数组或对象最后一项使用逗号
* 使用驼峰命名或者 UPPERCASE_WITH_UNDERSCORES
* 行长 120
* 单文件最大行数 600
* 禁用未使用的变量
* 使用 === 和 !== 进行比较
* 禁止 var 声明多个变量
* 使用有效的 JSDoc
* ...

详细的规则参考下面的配置



大家可以大致看一下，对有问题的地方可以给出自己的答案。

目前的规范还很初级，当然也不会是一成不变的，后续会逐渐形成一些更合适的方式，毕竟这些都是为我们服务，而不是作为一种束缚



## 关于工具的选择

### 以前的选择

JSCS + JSHint

JSCS 只是代码风格检查

JSHint 侧重于代码质量

### 现在的选择

ESLint

WHY

* JSCS 的功能已经合并到 ESLint，只使用一种工具就能达到以前使用两种工具的功能
* 对 ES6 和 JSX 更好的支持
* 灵活的配置，可配置错误等级 off, error, warn，规则支持自定义配置

## .eslintrc

这里是 ESLint 的配置文件，使用 JS 格式（.eslintrc.js)

在 `eslint:recommended` 的基础上定制更多规则，`eslint:recommended` 包含一些最常用的，也是业界推荐的，包含新的 ES6 语法

`React` 的规则通过插件 `eslint-plugin-react` 实现

```js
module.exports = {
    "env": {
        "browser": true,
        "commonjs": true,
        "amd": true,
        "es6": true,
    },
    "globals": {
        "restfulApi": true,
    },
    "extends": [
        "eslint:recommended",
        "plugin:react/recommended"
    ],
    "parser": "babel-eslint",
    "parserOptions": {
        "ecmaVersion": 6,
        "ecmaFeatures": {
            "jsx": true,
            "experimentalObjectRestSpread": true,
        },
    },
    "plugins": [
        "react"
    ],
    "root": true,
    "rules": {
        // 使用 4 个空格缩进
        "indent": [2, 4],
        // 使用驼峰命名或者 UPPERCASE_WITH_UNDERSCORES
        "camelcase": [2, {"properties": "never"}],
        // 使用单引号
        "quotes": [2, "single", {"allowTemplateLiterals": true}],
        // 使用分号
        "semi": [2, "always"],
        // 使用 === 和 !==
        "eqeqeq": [2, "always"],
        // 不省略 {}
        "curly": [2, "all"],

        // 禁用不必要的布尔转换
        "no-extra-boolean-cast": 2,

        // disable rules from base configurations
        "no-console": "off",

        // code style
        // 数组中起始位置是否需要空格
        "array-bracket-spacing": [2, "never"],
        // 设置{}风格
        "brace-style": [2, "1tbs", { "allowSingleLine": true }],
        // 不允许在数组或对象最后一项使用逗号
        "comma-dangle": [2, "never"],
        // 在分号前不适用空格，分号后使用空格
        "comma-spacing": 2,
        // 分号风格，默认放在行尾
        "comma-style": 2,
        // 在变量属性中禁用空格
        "computed-property-spacing": 2,
        // 设置对 this 的引用
        "consistent-this": [2, "that"],
        // 文件以新行结尾
        "eol-last": 2,
        // 在函数标识和 () 之间禁用空格
        "func-call-spacing": 2,
        // JSX 使用双引号
        "jsx-quotes": [2, "prefer-double"],
        // 在 key 和 value 之间的空格一个空格
        "key-spacing": 2,
        // 在关键字前后使用空格
        "keyword-spacing": 2,
        // 行注释位置（上面 ？后面）
        "line-comment-position": 2,
        // 最深嵌套 4 层
        "max-depth": [2, { "max": 4 }],
        // 最大行长
        "max-len": [2, {
            "code": 120,
            "ignoreUrls": true,
        }],
        // 文件最大行数
        "max-lines": [2, 600],
        // 函数最多参数
        "max-params": [2, { "max": 4 }],
        // 每行最大语句条数为 2
        "max-statements-per-line": [2, { "max": 2 }],
        // 函数最大语句条数
        "max-statements": [1, { "max": 16 }],
        // 使用 new 实例化对象，类名大写字母开头
        "new-cap": 2,
        // 不使用 Array 构造函数
        "no-array-constructor": 2,
        "no-lonely-if": 2,
        // "no-mixed-operators": 0,
        "no-mixed-spaces-and-tabs": 2, // eslint:recommended
        // 最大两行空白
        "no-multiple-empty-lines": [2, {"max": 2}],
        // 禁用 Object 构造函数
        "no-new-object": 2,
        // 禁用 tabs
        "no-tabs": 2,
        // 禁用行末额外的空白
        "no-trailing-spaces": 2,
        // 禁用不需要的三元表达式
        "no-unneeded-ternary": 2,
        // 属性前没有空白
        "no-whitespace-before-property": 2,
        // 在对象 {} 中使用空格
        "object-curly-spacing": [2, "always"],
        // 单独使用声明
        "one-var": [2, {
            "var": "never",
            "let": "never",
            "const": "never",
        }],
        // 在块中禁用大量空白填充
        "padded-blocks": [2, "never"],
        // 在需要使用引号时该对象所有属性都使用引号
        "quote-props": [2, "consistent"],
        // 需要使用 JSDoc
        "require-jsdoc": [2, {
            "require": {
                "FunctionDeclaration": true,
                "MethodDefinition": false,
                "ClassDeclaration": false,
            },
        }],
        // 配置 JSDoc 规则
        "valid-jsdoc": [2, {
            "requireParamDescription": false,
            "requireReturnDescription": false,
            "requireReturn": false,
            "prefer": {"returns": "return"},
        }],
        "semi-spacing": [2, {
            "before": false,
            "after": true
        }],
        // 在块语句前使用空格
        "space-before-blocks": 2,
        // 在函数声明后禁用空格
        "space-before-function-paren": [2, "never"],
        // 在中缀操作符之间需要空格
        "space-infix-ops": [2, {"int32Hint": false}],
        // 在注释后使用空格
        "spaced-comment": [2, "always"],

        // react
        // 这里关掉属性类型校验
        "react/prop-types": "off",
    }
};
```

## eslint:recommended

```js
{
    // 在条件表达式禁用赋值运算符
    "no-cond-assign": 2,
    // 禁用 console
    "no-console": 2,
    // 在条件语句禁用常量表达式
    "no-constant-condition": 2,
    // 在正则表达式禁用控制字符
    "no-control-regex": 2,
    // 禁用 debugge
    "no-debugger": 2,
    // 在函数声明禁用重复参数
    "no-dupe-args": 2,
    // 在对象字面量禁用重复 key
    "no-dupe-keys": 2,
    // 在 switch 禁用重复 case
    "no-duplicate-case": 2,
    // 在正则表达式禁用空的字符集
    "no-empty-character-class": 2,
    // 禁用空块
    "no-empty": 2,
    // 在 try 语句禁用重写异常
    "no-ex-assign": 2,
    // 禁用不必要的分号
    "no-extra-semi": 2,
    // 禁用重写函数声明
    "no-func-assign": 2,
    // 在块语句中禁用函数声明
    "no-inner-declarations": 2,
    // 在正则表达式构造函数禁用无效字符串
    "no-invalid-regexp": 2,
    // 禁用不规范的空白
    "no-irregular-whitespace": 2,
    // 禁用以函数形式调用全局 Object 属性
    "no-obj-calls": 2,
    // 在正则表达式字面量禁用连续多个空格
    "no-regex-spaces": 2,
    // 禁用稀疏数组
    "no-sparse-arrays": 2,
    // 禁用混淆多行表达式
    "no-unexpected-multiline": 2,
    // 禁用不能执行的语句
    "no-unreachable": 2,
    // 在 finally 禁用流程控制语句
    "no-unsafe-finally": 2,
    // 在需要判断 NaN 时使用 isNaN()
    "use-isnan": 2,
    // 使用 typeof 比较时必须是有效的字符串
    "valid-typeof": 2,
    // 在 case/default 中禁用此法声明
    "no-case-declarations": 2,
    // 禁用空解构模式
    "no-empty-pattern": 2,
    // 在 case 语句必须使用 break
    "no-fallthrough": 2,
    // 禁用八进制
    "no-octal": 2,
    // 禁用重新声明
    "no-redeclare": 2,
    // 禁用重写自身声明
    "no-self-assign": 2,
    // 禁用无用的 label
    "no-unused-labels": 2,
    // 禁用对变量 delete
    "no-delete-var": 2,
    // 禁用未声明的变量
    "no-undef": 2,
    // 禁用未使用的标量
    "no-unused-vars": 2,
    // 禁止混合使用 tab 和 space
    "no-mixed-spaces-and-tabs": 2,

    // ECMAScript 6
    "constructor-super": 2,
    "no-class-assign": 2,
    "no-const-assign": 2,
    "no-dupe-class-members": 2,
    "no-new-symbol": 2,
    "no-this-before-super": 2,
    "require-yield": 2
}
```

## react/recommended

```js
{
    "react/display-name": 2,
    "react/jsx-no-duplicate-props": 2,
    "react/jsx-no-undef": 2,
    "react/jsx-uses-react": 2,
    "react/jsx-uses-vars": 2,
    "react/no-deprecated": 2,
    "react/no-direct-mutation-state": 2,
    "react/no-find-dom-node": 2,
    "react/no-is-mounted": 2,
    "react/no-unknown-property": 2,
    "react/no-render-return-value": 2,
    "react/prop-types": 2,
    "react/react-in-jsx-scope": 2,
    "react/require-render-return": 2
}
```

## 针对单文件的特殊配置

```js
/* eslint react/display-name: "off" */

import React from 'react';
import PortalMixin from 'portalmixin22';
import ResetForm from './Reset';

module.exports = React.createClass({
    mixins: [PortalMixin(ResetForm)],
    render: function() {
        return null;
    }
});
```

## .eslintignore

在这里可以配置一些忽略检查的文件，默认忽略 /node_modules/

example

```
# /node_modules/* and /bower_components/* ignored by default

build/*
**/*.ts
```

## .editorconfig

```
# editorconfig.org
root = true

[*]
indent_style = space
indent_size = 4
charset = utf-8
trim_trailing_whitespace = true
insert_final_newline = true

[*.md]
trim_trailing_whitespace = false
```

## HOW TO USE IT

### Command line

```sh
eslint "src/**"
```

使用 `--fix` 可以自动修复一些错误的地方，就像这样

```sh
eslint "src/**" --fix
```

自定义错误报告形式

* checkstyle
* codeframe
* compact
* html
* jslint-xml
* json
* junit
* stylish
* table
* tap
* unix
* visualstudio

更多 Options：[Command Line Interface](http://eslint.org/docs/user-guide/command-line-interface)

### Webpack

添加到 preloader

```js
preLoaders: [{
    test: /\.jsx?$/,
    loader: 'eslint-loader',
    exclude: /node_modules/
}],
```

### Gulp

```js
const gulp = require('gulp')
const eslint = require('gulp-eslint');

gulp.task('lint', () => {
    return gulp.src(['src/**'])
        .pipe(eslint())
        .pipe(eslint.format('table'))
});

gulp.task('default', ['lint']);
```

### Editor

可以下载一个编辑器插件来提醒错误，这个大部分流行的编辑器应该都有

下图是 Atom 下的提示方式

![Atom ESLint](eslint_atom.png)


## 最后
